openapi: 3.0.3
info:
  version: 1.0.0
  title: DCSA OpenAPI specification for Commercial Schedules
  description: |
    API specification issued by DCSA.org.
    
    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/cs/v1#v100). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: https://dcsa.org
    email: info@dcsa.org
paths:
  /v1/point-to-point-schedules:
    get:
      summary: Get Point-Point schedules
      description: |
        Retrieves the Point-Point schedules
      parameters:
        - $ref: '#/components/parameters/placeOfReceipt'
        - $ref: '#/components/parameters/portOfLoad'
        - $ref: '#/components/parameters/placeOfDelivery'
        - $ref: '#/components/parameters/portOfDischarge'
        - $ref: '#/components/parameters/departureStartDate'
        - $ref: '#/components/parameters/departureEndDate'
        - $ref: '#/components/parameters/arrivalStartDate'
        - $ref: '#/components/parameters/arrivalEndDate'
        - $ref: '#/components/parameters/useDirectRouting'
        - $ref: '#/components/parameters/vesselFlag'

        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/parameters/limit'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/parameters/cursor'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/parameters/sort'
        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/headers/API-Version'
            Current-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/headers/Current-Page'
            Next-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/headers/Next-Page'
            Prev-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/headers/Prev-Page'
            Last-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/headers/Last-Page'
            First-Page:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/headers/First-Page'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pointToPoint'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: 'https://api.swaggerhub.com/domains/dcsaorg/ERROR_DOMAIN/1.1.0#/components/schemas/error'
components:
  schemas:
    pointToPoint:
      type: string
      maxLength: 3
      description: |
        The code to identify the type of information `documentID` points to. Can be one of the following values
        - CBR (Carrier Booking Request Reference)
        - BKG (Booking)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
      example: CBR
      enum:
        - CBR
        - BKG
    shipmentEventTypeCode:
      type: string
      description: |
        The status of the booking in the process. Possible values are
        - RECE (Received)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - CANC (Cancelled)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.
      enum:
        - RECE
        - PENU
        - PENC
        - CONF
        - REJE
        - CANC
      example: CONF
    
  parameters:
  
    #############
    # Path params
    #############
    
        - $ref: '#/components/parameters/useDirectRoutingQueryParam'
        - $ref: '#/components/parameters/vesselFlagQueryParam'
    placeOfReceiptQueryParam:
      in: query
      name: placeOfReceipt
      description: |
        `Place Of Receipt` defined as a UnLocationCode. Cannot be used in combination with `portOfLoad`
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/schemas/UNLocationCode'
      required: false
    portOfLoadQueryParam:
      in: query
      name: portOfLoad
      description: |
        `Port Of Load` defined as a UnLocationCode. Cannot be used in combination with `placeOfReceipt`
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/schemas/UNLocationCode'
      required: false
    placeOfDeliveryQueryParam:
      in: query
      name: placeOffDelivery
      description: |
        `Place Of fDelivery` defined as a UnLocationCode. Cannot be used in combination with `portOfDischarge`
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/schemas/UNLocationCode'
      required: false
    portOfLoadQueryParam:
      in: query
      name: portOfDischarge
      description: |
        `Port Of Discharge` defined as a UnLocationCode. Cannot be used in combination with `placeOffDelivery`
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/schemas/UNLocationCode'
      required: false
    departureStartDateTimeQueryParam:
      in: query
      name: departureStartDateTime
      description: |
        Limit the result based on the departure start DateTime. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)
        
        <i>departureStartDateTime<b>&#58;gte</b>=2021-04-01T14&#58;12&#58;56+01&#58;00</i>
        
        would result in all events created &#8805; 2021-04-01T14&#58;12&#58;56+01&#58;00
        
        The following operators are supported
        - &#58;gte (&#8805; Greater than or equal)
        - &#58;gt (&#62; Greater than)
        - &#58;lte (&#8804; Less than or equal)
        - &#58;lt (&#60; Less than)
        - &#58;eq (&#61; Equal to)
        
        If no operator is provided, a <b>strictly equal</b> is used (this is equivalent to <b>&#58;eq</b> operator).
      required: false
      example: 2021-04-01T14:12:56+01:00
      schema:
        $ref: '#/components/schemas/eventCreatedDateTime'
    departureEndDateTimeQueryParam:
      in: query
      name: departureEndDateTime
      description: |
        Limit the result based on the departure end DateTime. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)
        
        <i>departureEndDateTime<b>&#58;gte</b>=2021-04-01T14&#58;12&#58;56+01&#58;00</i>
        
        would result in all events created &#8805; 2021-04-01T14&#58;12&#58;56+01&#58;00
        
        The following operators are supported
        - &#58;gte (&#8805; Greater than or equal)
        - &#58;gt (&#62; Greater than)
        - &#58;lte (&#8804; Less than or equal)
        - &#58;lt (&#60; Less than)
        - &#58;eq (&#61; Equal to)
        
        If no operator is provided, a <b>strictly equal</b> is used (this is equivalent to <b>&#58;eq</b> operator).
      required: false
      example: 2021-04-01T14:12:56+01:00
      schema:
        $ref: '#/components/schemas/eventCreatedDateTime'
    arrivalStartDateTimeQueryParam:
      in: query
      name: arrivalStartDateTime
      description: |
        Limit the result based on the arrival start DateTime. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)
        
        <i>departureStartDateTime<b>&#58;gte</b>=2021-04-01T14&#58;12&#58;56+01&#58;00</i>
        
        would result in all events created &#8805; 2021-04-01T14&#58;12&#58;56+01&#58;00
        
        The following operators are supported
        - &#58;gte (&#8805; Greater than or equal)
        - &#58;gt (&#62; Greater than)
        - &#58;lte (&#8804; Less than or equal)
        - &#58;lt (&#60; Less than)
        - &#58;eq (&#61; Equal to)
        
        If no operator is provided, a <b>strictly equal</b> is used (this is equivalent to <b>&#58;eq</b> operator).
      required: false
      example: 2021-04-01T14:12:56+01:00
      schema:
        $ref: '#/components/schemas/eventCreatedDateTime'
    arrivalEndDateTimeQueryParam:
      in: query
      name: arrivalEndDateTime
      description: |
        Limit the result based on the arrival end DateTime. It is possible to use operators on this query parameter. This is done by adding a colon followed by an operator at the end of the queryParameterName (before the =)
        
        <i>departureEndDateTime<b>&#58;gte</b>=2021-04-01T14&#58;12&#58;56+01&#58;00</i>
        
        would result in all events created &#8805; 2021-04-01T14&#58;12&#58;56+01&#58;00
        
        The following operators are supported
        - &#58;gte (&#8805; Greater than or equal)
        - &#58;gt (&#62; Greater than)
        - &#58;lte (&#8804; Less than or equal)
        - &#58;lt (&#60; Less than)
        - &#58;eq (&#61; Equal to)
        
        If no operator is provided, a <b>strictly equal</b> is used (this is equivalent to <b>&#58;eq</b> operator).
      required: false
      example: 2021-04-01T14:12:56+01:00
      schema:
        $ref: '#/components/schemas/eventCreatedDateTime'

    ##############
    # Query params
    ##############
    
    documentID:
      in: query
      name: documentID
      description: |
        A set of unique characters to identify a resource. Specifying this filter will only return events related to this particular `documentID`. The `documentID` can point to a bookingRequest (`CBR`) or to a confirmed booking (`BKG`)
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/EVENT_DOMAIN/2.0.0#/components/schemas/documentID'
    documentStatus:
      in: query
      name: documentStatus
      description: |
        Filter by the status of the booking. Possible values are:
        - RECE (Received)
        - PENU (Pending Update)
        - PENC (Pending Confirmation)
        - CONF (Confirmed)
        - REJE (Rejected)
        - CANC (Cancelled)
        - CMPL (Completed)

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv">GitHub</a>. Be aware that the list linked to is the `ShipmentEventTypeCodes` which is equivalent to `documentStatus`, the list is a subset of the possible values.
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/2.0.0#/components/schemas/bookingDocumentStatus'
    documentTypeCodes:
      in: query
      name: documentTypeCode
      explode: false
      style: form
      description: |
        The `documentTypeCode` to filter by. Possible values are
        - CBR (Carrier Booking Request Reference)
        - BKG (Booking)

        It is possible to select multiple values by comma `,` separating them. For multiple values the OR-operator is used. For example _documentTypeCode=CBR,BKG_ Matches **both** `ShipmentEvents` related to Booking Requests (`CBR`) and Confirmed Bookings (`BKG`).

        More details can be found on <a href="https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv">GitHub</a>. Be aware that the list provided here is a subset of the possible values.        
      example: CBR
      schema:
        default: [CBR,BKG]
        type: array
        items:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/2.0.0#/components/schemas/bookingDocumentTypeCode'
    carrierBookingRequestReferenceQueryParam:
      in: query
      name: carrierBookingRequestReference
      description: |
        A temporary ID provided by carrier to identify a booking request.
        
        Specifying this filter will only return booking requests related to this particular `carrierBookingRequestReference`.
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/schemas/carrierBookingRequestReference'
    carrierBookingReferenceQueryParam:
      in: query
      name: carrierBookingReference
      description: |
        A set of unique characters provided by carrier to identify a confirmed booking.
        
        Specifying this filter will only return confirmed bookings related to this particular `carrierBookingReference`.
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.0#/components/schemas/carrierBookingReference'