# OpenAPI version identifier - required for OpenAPI 3.0 domains
openapi: 3.0.3

#######################
# Optional info section
#######################
info:
  title: DCSA Event Components
  description: |
    Common components for DCSA Events. This domain is central for all Event Hubs and is used by
    - Event Hub (General event hub for <a href="#/components/schemas/transportEvent">TransportEvent</a>, <a href="#/components/schemas/equipmentEvent">EquipmentEvent</a>, <a href="#/components/schemas/shipmentEvent">ShipmentEvents</a> and <a href="#/components/schemas/operationsEvent">OperationsEvent</a>)
    - T&T v2.1 and later (event hub for <a href="#/components/schemas/transportEvent">TransportEvent</a>, <a href="#/components/schemas/equipmentEvent">EquipmentEvent</a> and <a href="#/components/schemas/shipmentEvent">ShipmentEvents</a>)
    - Documentation Hub used by eBL (event hub for <a href="#/components/schemas/shipmentEvent">ShipmentEvents</a>)
    - OVS Hub used by OVS (event hub for <a href="#/components/schemas/transportEvent">TransportEvent</a> and <a href="#/components/schemas/operationsEvent">OperationsEvent</a>)
  version: '1.0.0'

components:
  parameters:

    ####################
    ## Header parameters
    ####################

    apiVersion:
      in: header
      name: API-Version
      required: true
      schema:
        type: string
        example: v1.0.0
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
    notificationSignature:
      in: header
      name: Notification-Signature
      required: false
      description: |
        Missing
      explode: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9]{25,}$'
        example: 'e4567A89bB12d3a4TZ564Eh26'
    signatureHeader:
      in: header
      name: Signature
      required: true
      description: |
        The signature certifying the request originates from the carrier.
      deprecated: true
      explode: true
      schema:
        properties:
          keyId:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
          created:
            type: integer
            example: 1591960384 
          headers:
            type: string
            example: '(request-target) (created) date host'
          signature:
            type: string
            example: aGkgZnJvbSBkZW5tYXJr
    subscriptionIDHeader:
      in: header
      name: Subscription-ID
      required: true
      description: 'The ID of the subscription triggering the event being sent.'
      explode: true
      schema:
        type: string
        format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000

    #################
    # Path parameters
    #################

    eventID:
      in: path
      name: eventID
      schema:
        $ref: '#/components/schemas/eventID'
      required: true
      description: 'The ID of the event to receive'
      example: 123e4567-e89b-12d3-a456-426614174000
    subscriptionID:
      in: path
      name: subscriptionID
      schema:
        $ref: '#/components/schemas/subscriptionID'
      required: true
      description: 'The universal unique ID of the subscription.'
      example: 123e4567-e89b-12d3-a456-426614174000

    ##################
    # Query parameters
    ##################
    
    bookingReference:
      in: query
      name: bookingReference
      deprecated: true
      description: Deprecated - use carrierBookingReference instead.
      required: false
      schema:
        type: string
    carrierBookingReference:
      in: query
      name: carrierBookingReference
      description: 'A set of unique characters provided by carrier to identify a booking.'
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/carrierBookingReference'
    carrierVoyageNumber:
      in: query
      name: carrierVoyageNumber
      description: |
        The vessel operator-specific identifier of the Voyage.
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/carrierVoyageNumber'
    equipmentEventType:
      in: query
      name: equipmentEventType
      description: |
        Unique identifier for equipmentEventType.
        - LOAD (Loaded)
        - DISC (Discharged)
        - GTIN (Gated in)
        - GTOT (Gated out)
        - STUF (Stuffed)
        - STRP (Stripped)

        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>equipmentEventType=GTIN,GTOT</i> matches <b>both</b> Gated in (GTIN) and Gated out (GTOT) equipment events. Default is all equipmentEventTypes.
      example: [GTIN,GTOT]
      schema:
        default: [LOAD,DISC,GTIN,GTOT,STUF,STRP]
        type: array
        items:
          $ref: '#/components/schemas/equipmentEventType'
    equipmentReference:
      in: query
      name: equipmentReference
      description: 'The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.'
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/equipmentReference'
    eventCreatedDateTime:
      in: query
      name: eventCreatedDateTime
      description: |
        Limit the result based on a date. It is possible to use operators on this query parameter. This is done by adding an operator at the beginning of the value followed by a colon&#58;<br><i>eventCreatedDateTime=<b>gte&#58;</b>2021-04-01T14&#58;12&#58;56+01&#58;00</i><br>
        would result in all events created &gt;= 2021-04-01T14&#58;12&#58;56+01&#58;00<br>
        The following operators are supported
        - gte&#58; (>= Greater than or equal)
        - gt&#58; (> Greater than)
        - lte&#58; (<= Less than or equal)
        - lt&#58; (< Less than)
        - eq&#58; (= Equal to)
        
        If no operator is provided, a <b>strictly equal</b> is used (this is equivalent to <b>eq&#58;</b> operator).
      required: false
      example: gte:2021-04-01T14:12:56+01:00
      #        gte&#58;2021-04-01T14&#58;12&#58;56+01&#58;00
      schema:
        $ref: '#/components/schemas/eventCreatedDateTime'
    operationsEventType:
      in: query
      name: operationsEventType
      description: |
        The code to identify the type of event that is related to the operation
        - STRT (Started)
        - CMPL (Completed)
        - ARRI (Arrived)
        - DEPA (Departed)

        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>operationsEventType=ARRI,CMPL</i> matches <b>both</b> Arrived (ARRI) and Completed (CMPL) operations events. Default is all operationsEventTypes.
      example: [ARRI,CMPL]
      schema:
        default: [STRT,CMPL,ARRI,DEPA]
        type: array
        items:
          $ref: '#/components/schemas/operationsEventType'
    scheduleID:
      in: query
      name: scheduleID
      description: |
        ID uniquely identifying a schedule, to filter events by.
        
        This filter was added by mistake and is thus deprecated.
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/scheduleID'
      deprecated: true
    shipmentEventType:
      in: query
      name: shipmentEventType
      description: |
        The status of the document in the process. Possible values are
        - RECE (Received)
        - DRFT (Drafted)
        - PENA (Pending Approval)
        - PENU (Pending Update)
        - REJE (Rejected)
        - APPR (Approved)
        - ISSU (Issued)
        - SURR (Surrendered)
        - SUBM (Submitted)
        - VOID (Void)
        - CONF (Confirmed)
        
        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>shipmentEventType=RECE,DRFT</i>  Matches <b>both</b> Received (RECE) and Drafted (DRFT) shipment events. Default is all shipmentEventTypes.
      example: [RECE,DRFT]
      schema:
        default: [RECE,DRFT,PENA,PENU,REJE,APPR,ISSU,SURR,SUBM,VOID,CONF]
        type: array
        items:
          $ref: '#/components/schemas/shipmentEventType'
    shippingInstructionID:
      in: query
      name: shippingInstructionID
      description: |
        The Shipping Instruction ID identifier is an identifier that links to a shipping instruction
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/shippingInstructionID'
    transportCallID:
      in: query
      name: transportCallID
      description: 'ID uniquely identifying a transport call, to filter events by.'
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/transportCallID'
    transportDocumentID:
      in: query
      name: transportDocumentID
      description: |
        The Transport Document ID identifier is an identifier that links to a shipment, i.e. a Bill of Lading or a Sea Waybill. A bill of lading is the document of title to the goods issued to the customer which confirms the carrier&apos;s receipt of the cargo from the customer, acknowledging goods being shipped and specifying the terms of delivery.
        The Sea Waybill is a simpler document, the main difference being that it is non-negotiable.
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/transportDocumentID'
    transportDocumentTypeCode:
      in: query
      name: transportDocumentTypeCode
      description: |
        Specifies the type of the transport document (a Bill of Lading (BOL) or a Sea Waybill (SWB)). Default is both.
      required: false
      schema:
        default: [BOL,SWB]
        type: array
        items:
          $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/transportDocumentType'
    transportEventType:
      in: query
      name: transportEventType
      description: |
        Identifier for type of Transport event
        - ARRI (Arrived)
        - DEPA (Departed)
        - OMIT (Omitted)

        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>transportEventType=ARRI,DEPA</i> matches <b>both</b> Arrived (ARRI) and Departed (DEPA) transport events. Default is all transportEventTypes.
      example: [ARRI,DEPA]
      schema:
        default: [ARRI,DEPA]
        type: array
        items:
          $ref: '#/components/schemas/transportEventType'
    vesselIMONumber:
      in: query
      name: vesselIMONumber
      description: |
        The identifier of vessel for which schedule details are published. Depending on schedule type, this may not be available yet.
      required: false
      schema:
        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/vesselIMONumber'

  ####################
  # Common data models
  ####################
  
  schemas:
  
    ###################
    # Base Event object
    ###################

    baseEventBody:
      type: object
      description: |
        The Event entity is described as a generalization of all the specific event categories. An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment
      allOf:
        - type: object
          properties:
            eventType:
              allOf:
                - $ref: '#/components/schemas/eventType'
        - type: object
          properties:
            eventClassifierCode:
              $ref: '#/components/schemas/eventClassifierCode'
        - type: object
          properties:
            eventDateTime:
              $ref: '#/components/schemas/eventDateTime'
      required:
        - eventType
        - eventClassifierCode
        - eventDateTime
    
    baseEvent:
      type: object
      allOf:
        - type: object
          properties:
            eventID:
              $ref: '#/components/schemas/eventID'
        - type: object
          properties:
            eventCreatedDateTime:
              $ref: '#/components/schemas/eventCreatedDateTime'
        - $ref: '#/components/schemas/baseEventBody'
      required:
        - eventID
        - eventCreatedDateTime


    ##########################
    # Shipment Event object
    ##########################


    baseShipmentEvent:
      type: object
      description: |
        The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.
      allOf:
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventType:
              example: SHIPMENT
              enum:
                - SHIPMENT
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventDateTime:
              description: |
                Value for eventDateTime must be the same value as eventCreatedDateTime
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventClassifierCode:
              description: |
                Code for the event classifier must be
                - ACT (ACTUAL)
                - PLN (Planned)
                - EST (Estimated)
              enum:
                - ACT
                - PLN
                - EST
              example: ACT
        - type: object
          properties:
            shipmentEventType:
              $ref: '#/components/schemas/shipmentEventType'
        - type: object
          properties:
            documentID:
              $ref: '#/components/schemas/documentID'
        - type: object
          properties:
            shipmentInformationTypeCode:
              $ref: '#/components/schemas/shipmentInformationType'
        - type: object
          properties:
            reason:
              $ref: '#/components/schemas/reason'
        
        #####################################
        # Deprecated ShipmentEvent attributes
        #####################################
        
        - type: object
          properties:
            eventTypeCode:
              $ref: '#/components/schemas/eventTypeCode'
        - type: object
          properties:
            eventTypeCode:
              description: |
                Unique identifier for Event Type Code. For shipment events this can be
                - RECE (Received)
                - CONF (Confirmed)
                - ISSU (Issued)
                - APPR (Approved)
                - SUBM (Submitted)
                - SURR (Surrendered)
                - REJE (Rejected)
                - PENA (Pending approval)
                
                Deprecated - use shipmentEventType instead
              deprecated: true
              example: RECE
              enum:
                - RECE
                - CONF
                - ISSU
                - APPR
                - SUBM
                - SURR
                - REJE
                - PENA
        - type: object
          properties:
            shipmentID:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/shipmentID'
        - type: object
          properties:
            shipmentID:
              description: |
                ID uniquely identifying a shipment.
                
                Deprecated - this is replaced by documentID which can contain different values depending on the value of the ShipmentInformationTypeCode field
              deprecated: true
      required:
        - documentID
        - shipmentEventType
        - shipmentInformationTypeCode

    shipmentEventBody:
      type: object
      description: |
        The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.
        
        <b>NB:</b> This version of the entity is to be used when creating new Shipment events - this does not contain an eventID or an eventCreatedDateTime
      allOf:
        - $ref: '#/components/schemas/baseEventBody'
        - $ref: '#/components/schemas/baseShipmentEvent'

    shipmentEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseEvent'
        - $ref: '#/components/schemas/baseShipmentEvent'


    ###############################
    # Transport Event object
    ###############################


    baseTransportEvent:
      type: object
      description: |
        The transport event entity is a specialization of the event entity to support specification of data that only applies to a transport event.
      allOf:
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventType:
              example: TRANSPORT
              enum:
                - TRANSPORT
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventClassifierCode:
              description: |
                Code for the event classifier can be
                - ACT (Actual)
                - PLN (Planned)
                - EST (Estimated)
              enum:
                - ACT
                - PLN
                - EST
              example: ACT
        - type: object
          properties:
            transportEventType:
              $ref: '#/components/schemas/transportEventType'
        - type: object
          properties:
            delayReasonCode:
              $ref: '#/components/schemas/delayReasonCode'
        - type: object
          properties:
            changeRemark:
              $ref: '#/components/schemas/changeRemark'
        - type: object
          properties:
            transportCall:
              $ref: '#/components/schemas/transportCall'
        - type: object
          properties:
            documentReferences:
              $ref: '#/components/schemas/documentReferences'

        ######################################
        # Deprecated TransportEvent attributes
        ######################################
        
        - type: object
          properties:
            eventTypeCode:
              $ref: '#/components/schemas/eventTypeCode'
        - type: object
          properties:
            eventTypeCode:
              description: |
                Unique identifier for Event Type Code, for transport events this is either
                - ARRI (Arrival)
                - DEPA (Departure)
                
                Deprecated - use transportEventType instead
              deprecated: true
              enum:
                - ARRI
                - DEPA
      required:
        - transportCall

    transportEventBody:
      type: object
      description: |
        The transport event entity is a specialization of the event entity to support specification of data that only applies to a transport event.
        
        <b>NB:</b> This version of the entity is to be used when creating new Transport events - this does not contain an eventID or an eventCreatedDateTime
      allOf:
        - $ref: '#/components/schemas/baseEventBody'
        - $ref: '#/components/schemas/baseTransportEvent'

    transportEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseEvent'
        - $ref: '#/components/schemas/baseTransportEvent'


    ########################
    # Equipment Event object
    ########################


    baseEquipmentEvent:
      type: object
      description: |
        The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.
      allOf:
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventType:
              example: EQUIPMENT
              enum:
                - EQUIPMENT
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventClassifierCode:
              description: |
                Code for the event classifier can be:
                - PLN (Planned)
                - ACT (Actual)
                - EST (Estimated)
              enum:
                - PLN
                - ACT
                - EST
              example: EST
        - type: object
          properties:
            equipmentEventType:
              $ref: '#/components/schemas/equipmentEventType'
        - type: object
          properties:
            equipmentReference:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/equipmentReference'
        - type: object
          properties:
            emptyIndicatorCode:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/emptyIndicatorCode'
        - type: object
          properties:
            transportCall:
              $ref: '#/components/schemas/transportCall'
        - type: object
          properties:
            documentReferences:
              $ref: '#/components/schemas/documentReferences'

        ######################################
        # Deprecated EquipmentEvent attributes
        ######################################

        - type: object
          properties:
            eventTypeCode:
              $ref: '#/components/schemas/eventTypeCode'
        - type: object
          properties:
            eventTypeCode:
              description: |
                Unique identifier for Event Type Code, for transport events this is either
                - LOAD (Loaded)
                - DISC (Discharged)
                - GTIN (Gated in)
                - GTOT (Gated out)
                - STUF (Stuffed)
                - STRP (Stripped)
                
                Deprecated - use equipmentEventType instead
              deprecated: true
              enum: 
                - LOAD
                - DISC
                - GTIN
                - GTOT
                - STUF
                - STRP
      required:
        - emptyIndicatorCode
        - transportCall

    equipmentEventBody:
      type: object
      description: |
        The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.
        
        <b>NB:</b> This version of the entity is to be used when creating new Equipment events - this does not contain an eventID or an eventCreatedDateTime
      allOf:
        - $ref: '#/components/schemas/baseEventBody'
        - $ref: '#/components/schemas/baseEquipmentEvent'

    equipmentEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseEvent'
        - $ref: '#/components/schemas/baseEquipmentEvent'


    #########################
    # Operations Event object
    #########################


    baseOperationsEvent:
      type: object
      description: |
        The operations event entity is a specialization of the event entity to support specification of data that only applies to an operations event.
      allOf:
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventType:
              example: OPERATIONS
              enum:
                - OPERATIONS
        #Overriding this property to have correct payload response examples
        - type: object
          properties:
            eventClassifierCode:
              description: |
                Code for the event classifier can be
                - ACT (Actual)
                - PLN (Planned)
                - EST (Estimated)
                - REQ (Requested)
              enum:
                - ACT
                - PLN
                - EST
                - REQ
              example: ACT
        - type: object
          properties:
            operationsEventType:
              $ref: '#/components/schemas/operationsEventType'
        - type: object
          properties:
            publisher:
              type: string
              maxLength: 50
              description: |
                The publisher (source) of the event 
        - type: object
          properties:
            publisherCodeListProvider:
              type: string
              maxLength: 4
              description: |
                The code list provider of the publisher codes
        - type: object
          properties:
            publisherRole:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/partyFunction'
                - description: The party function code of the publisher
        - type: object
          properties:
            eventLocation:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/1.0.0#/components/schemas/location'
                - description: The location where the event takes place.
              # type: string
              # format: uuid
              # description: |
              #   The location where the event takes place.
        - type: object
          properties:
            portCallServiceTypeCode:
              type: string
              description: |
                The type of the service provided in the port call
                - PILO (Pilotage)
                - MOOR (Mooring)
                - CRGO (Cargo operations)
                - TOWG (Towage)
                - BUNK (Bunkering)
                - WSDP (Waste disposal)
              enum:
                - PILO
                - MOOR
                - CRGO
                - TOWG
                - BUNK
                - WSDP
              example: BUNK
        - type: object
          properties:
            facilityTypeCode:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/facilityTypeCode'
        # Extend facilityTypeCode to ONLY include PBPL and BRTH
        - type: object
          properties:
            facilityTypeCode:
              type: string
              example: BRTH
              description: |
                The code to identify the specific type of facility.
                - PBPL (Pilot boarding place)
                - BRTH (Berth)
              maxLength: 4
              enum:
                - PBPL
                - BRTH
        - type: object
          properties:
            delayReasonCode:
              $ref: '#/components/schemas/delayReasonCode'
        - type: object
          properties:
            changeRemark:
              $ref: '#/components/schemas/changeRemark'
        - type: object
          properties:
            transportCall:
              $ref: '#/components/schemas/transportCall'
        - type: object
          properties:
            vesselPosition:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/1.0.0#/components/schemas/location'
                - description: The position of the vessel at the time when the message was sent
              # type: string
              # format: uuid
              # description: |
      required:
        - portCallServiceTypeCode

    operationsEventBody:
      type: object
      description: |
        The operations event entity is a specialization of the event entity to support specification of data that only applies to an operations event.
        
        <b>NB:</b> This version of the entity is to be used when creating new Operations events - this does not contain an eventID or an eventCreatedDateTime
      allOf:
        - $ref: '#/components/schemas/baseEventBody'
        - $ref: '#/components/schemas/baseOperationsEvent'

    operationsEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/baseEvent'
        - $ref: '#/components/schemas/baseOperationsEvent'


    ##############################
    # Shipment Subscription object
    ##############################


    shipmentSubscriptionBody:
      type: object
      allOf:
        - type: object
          properties:
            shipmentEventType:
              $ref: '#/components/schemas/shipmentEventTypes'
        - type: object
          properties:
            carrierBookingReference:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/carrierBookingReference'
        - type: object
          properties:
            bookingReference:
              type: string
              maxLength: 35
              example: ABC709951
              description: |
                The identifier for a shipment, which is issued by and unique within each of the carriers.
                
                Deprecated - use carrierBookingReference instead
              deprecated: true
        - type: object
          properties:
            transportDocumentID:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/transportDocumentID'
        - type: object
          properties:
            transportDocumentTypeCode:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/transportDocumentType'
              default: [BOL,SWB]
              description: |
                Specifies the type of the transport document (a Bill of Lading (BOL) or a Sea Waybill (SWB)). Default is both.


    ###############################
    # Equipment Subscription object
    ###############################


    equipmentSubscriptionBody:
      type: object
      allOf:
        - type: object
          properties:
            equipmentEventType:
              $ref: '#/components/schemas/equipmentEventTypes'
        - type: object
          properties:
            equipmentReference:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/equipmentReference'


    ###############################
    # Transport Subscription object
    ###############################


    transportSubscriptionBody:
      type: object
      allOf:
        - type: object
          properties:
            transportEventType:
              $ref: '#/components/schemas/transportEventTypes'
        - type: object
          properties:
            scheduleID:
              allOf:
                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/scheduleID'
                - deprecated: true
                - description: 'ID uniquely identifying a schedul.<br>Deprecated as this was added by mistake'
        - type: object
          properties:
            transportCallID:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/transportCallID'
        - type: object
          properties:
            vesselIMONumber:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/vesselIMONumber'
        - type: object
          properties:
            carrierVoyageNumber:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/carrierVoyageNumber'
        # - type: object
        #   properties:
        #     carrierServiceNumber:
        #       $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/carrierServiceCode'


    ################################
    # Operations Subscription object
    ################################


    operationsSubscriptionBody:
      type: object
      allOf:
        - type: object
          properties:
            operationsEventType:
              $ref: '#/components/schemas/operationsEventTypes'


    documentReferences:
      type: array
      description:
        An optional list of key-value pairs representing links to objects relevant to the event. The <b>key</b>-field is used to describe where the <b>value</b>-field is pointing to.
      example:
        - key: BKG
          value: 123e4567-e89b-12d3-a456-426614174000
        - key: BKG
          value: 85943567-eedb-98d3-f4ed-aed697474ed4
      items:
        type: object
        properties:
          key:
            type: string
            description:
              Describes where the value is pointing to
            example: BKG
            enum:
              - BKG (Booking)
              - TRD (Transport Document)
          value:
            type: string
            description:
              The value of the identifier the key is describing
            example: 123e4567-e89b-12d3-a456-426614174000

    transportCall:
      type: object
      allOf:
        - type: object
          properties:
            transportCallID:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/transportCallID'
        - type: object
          properties:
            transportCallSequenceNumber:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/transportCallSequenceNumber'
        - type: object
          properties:
            carrierServiceCode:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/carrierServiceCode'
        - type: object
          properties:
            carrierVoyageNumber:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/carrierVoyageNumber'
        # Extending carrierVoyageNumber description!
        - type: object
          properties:
            carrierVoyageNumber:
              description: |
                The vessel operator-specific identifier of the Voyage.
                
                In case there are multiple voyages the export voyage is chosen.
        - type: object
          properties:
            facilityCode:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/facilityCode'
        - type: object
          properties:
            facilityTypeCode:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/facilityTypeCode'
        - type: object
          properties:
            otherFacility:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/otherFacility'
        - type: object
          properties:
            location:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/1.0.0#/components/schemas/location'
        - type: object
          properties:
            location:
              example:
                UNLocationCode: USNYC
        - type: object
          properties:
            vessel:
              $ref: '#/components/schemas/vessel'
    vessel:
      description: vessel
      type: object
      allOf:
        - type: object
          properties: 
            vesselIMONumber:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/vesselIMONumber'
        - type: object
          properties: 
            vesselName:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/vesselName'
        - type: object
          properties: 
            vesselFlag:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/vesselFlag'
        - type: object
          properties: 
            vesselCallSignNumber:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/vesselCallSignNumber'
        - type: object
          properties:
            vesselOperatorCarrierId:
              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/1.0.0#/components/schemas/vesselOperatorCarrierId'
    ##########################
    # Simple types
    ##########################


    callbackUrl:
      type: string
      format: uri
      description: |
        The endPoint where a Carrier whould send back events to the Shipper. The callback can contain query parameters uniquely identifying the originator of the events.
      example: https://myserver.com/send/callback/here?shipperRef=<shipper defined unique id>
    changeRemark:
      description: 'Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.'
      type: string
      example: Bad weather
      maxLength: 250
    delayReasonCode:
      description: |
        Reason code for the delay. The SMDG-Delay-Reason-Codes are used for this attribute. The code list can be found at http://www.smdg.org/smdg-code-lists/
      type: string
      maxLength: 3
      example: WEA
    documentID:
      type: string
      description: |
        The id of the object defined by the Shipment Information Type. In some cases this is a UUID in other cases this is a string.
    equipmentEventType:
      type: string
      description: |
        Unique identifier for equipmentEventType.
        - LOAD (Loaded)
        - DISC (Discharged)
        - GTIN (Gated in)
        - GTOT (Gated out)
        - STUF (Stuffed)
        - STRP (Stripped)
      enum: 
        - LOAD
        - DISC
        - GTIN
        - GTOT
        - STUF
        - STRP
      example: LOAD
    equipmentEventTypes:
      type: array
      description: |
        Unique identifier for equipmentEventType.
        - LOAD (Loaded)
        - DISC (Discharged)
        - GTIN (Gated in)
        - GTOT (Gated out)
        - STUF (Stuffed)
        - STRP (Stripped)

        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>equipmentEventType=GTIN,GTOT</i> matches <b>both</b> Gated in (GTIN) and Gated out (GTOT) equipment events. Default is all equipmentEventTypes.
      example: [GTIN,GTOT]
      default: [LOAD,DISC,GTIN,GTOT,STUF,STRP]
      items:
        type: string
        enum:
          - LOAD
          - DISC
          - GTIN
          - GTOT
          - STUF
          - STRP
        # $ref: '#/components/schemas/equipmentEventType'
    eventClassifierCode:
      type: string
      description: |
        Code for the event classifier. Values can vary depending on eventType
      #   - PLN (Planned)
      #   - ACT (Actual)
      #   - REQ (Requested)
      #   - EST (Estimated)
      # enum:
      #   - PLN
      #   - ACT
      #   - REQ
      #   - EST
      # example: ACT
    eventID:
      type: string
      format: uuid
      description: 'The unique identifier for the event.'
      example: '84db923d-2a19-4eb0-beb5-446c1ec57d34'
    eventCreatedDateTime:
      type: string
      format: date-time
      description: 'The timestamp of when the event was created'
      example: '2021-01-09T14:12:56+01:00'
    eventDateTime:
      type: string
      format: date-time
      example: '2019-11-12T07:41:00+08:30'
      description: The local date and time, where the event took place or when the event will take place, in ISO 8601 format.
    eventType:
      type: string
      description: |
        The Event Type of the object - to be used as a discriminator.
      # enum:
      #   - EQUIPMENT
      #   - SHIPMENT
      #   - TRANSPORT
      #   - OPERATIONS
    eventTypeCode:
      type: string
      example: ARRI
      maxLength: 4
      description: |
        Deprecated - Unique identifier for Event Type Code. This has been replaced by Specialized eventTypeCodes: shipmentEventType, transportEventType, equipmentEventType and opertaionsEventType
      deprecated: true
    operationsEventType:
      type: string
      description: |
        The code to identify the type of event that is related to the operation
        - STRT (Started)
        - CMPL (Completed)
        - ARRI (Arrived)
        - DEPA (Departed)
      enum:
        - STRT
        - CMPL
        - ARRI
        - DEPA
      example: STRT
    operationsEventTypes:
      type: array
      description: |
        The code to identify the type of event that is related to the operation
        - STRT (Started)
        - CMPL (Completed)
        - ARRI (Arrived)
        - DEPA (Departed)

        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>operationsEventType=ARRI,CMPL</i> matches <b>both</b> Arrived (ARRI) and Completed (CMPL) operations events. Default is all operationsEventTypes.
      example: [ARRI,CMPL]
      default: [STRT,CMPL,ARRI,DEPA]
      items:
        type: string
        enum:
          - STRT
          - CMPL
          - ARRI
          - DEPA
        # $ref: '#/components/schemas/operationsEventType'
    reason:
      type: string
      description: 'Reason field in a Shipment event. This field can be used to explain why a specific event has been sent.'
      example: 'The following attributes are missing...'
    shipmentEventType:
      type: string
      description: |
        The status of the document in the process. Possible values are
        - RECE (Received)
        - DRFT (Drafted)
        - PENA (Pending Approval)
        - PENU (Pending Update)
        - REJE (Rejected)
        - APPR (Approved)
        - ISSU (Issued)
        - SURR (Surrendered)
        - SUBM (Submitted)
        - VOID (Void)
        - CONF (Confirmed)
      enum:
        - RECE
        - DRFT
        - PENA
        - PENU
        - REJE
        - APPR
        - ISSU
        - SURR
        - SUBM
        - VOID
        - CONF
      example: DRFT
    shipmentEventTypes:
      type: array
      description: |
        The status of the document in the process. Possible values are
        - RECE (Received)
        - DRFT (Drafted)
        - PENA (Pending Approval)
        - PENU (Pending Update)
        - REJE (Rejected)
        - APPR (Approved)
        - ISSU (Issued)
        - SURR (Surrendered)
        - SUBM (Submitted)
        - VOID (Void)
        - CONF (Confirmed)
        
        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>shipmentEventType=RECE,DRFT</i>  Matches <b>both</b> Received (RECE) and Drafted (DRFT) shipment events. Default is all shipmentEventTypes.
      example: [RECE,DRFT]
      default: [RECE,DRFT,PENA,PENU,REJE,APPR,ISSU,SURR,SUBM,VOID,CONF]
      items:
        type: string
        enum:
          - RECE
          - DRFT
          - PENA
          - PENU
          - REJE
          - APPR
          - ISSU
          - SURR
          - SUBM
          - VOID
          - CONF
        # $ref: '#/components/schemas/shipmentEventType'
    shipmentInformationType:
      type: string
      maxLength: 3
      description: |
        The code to identify the type of information documentID points to. Can be one of the following values
        - BOK (Booking)
        - SHI (Shipping Instruction)
        - VGM (Verified Gross Mass)
        - SRM (Shipment Release Message)
        - TRD (Transport Document)
        - ARN (Arrival Notice)
      example: SHI
      enum:
        - BOK
        - SHI
        - VGM
        - SRM
        - TRD
        - ARN
    subscriptionID:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
      description: 'The carrier issues a unique ID to the shipper or consignee for that subscription'
    transportEventType:
      type: string
      description: |
        Identifier for type of Transport event
        - ARRI (Arrived)
        - DEPA (Departed)
        - OMIT (Omitted)
      enum:
        - ARRI
        - DEPA
        - OMIT
      example: ARRI
    transportEventTypes:
      type: array
      description: |
        Identifier for type of Transport event
        - ARRI (Arrived)
        - DEPA (Departed)
        - OMIT (Omitted)

        It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example <i>transportEventType=ARRI,DEPA</i> matches <b>both</b> Arrived (ARRI) and Departed (DEPA) transport events. Default is all transportEventTypes.
      example: [ARRI,DEPA]
      default: [ARRI,DEPA]
      items:
        type: string
        enum:
          - ARRI
          - DEPA
        # $ref: '#/components/schemas/transportEventType'