/*
 * DCSA OpenAPI specification for Track & Trace
 *
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@dcsa.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SubscriptionsApiController : ControllerBase
    { 
        /// <summary>
        /// Receive a list of your active notification subscriptions
        /// </summary>
        /// <response code="200">Returns a list of notification subscriptions</response>
        [HttpGet]
        [Route("/notification-subscriptions")]
        [ValidateModelState]
        [SwaggerOperation("NotificationSubscriptionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<NotificationSubscription>), description: "Returns a list of notification subscriptions")]
        public virtual IActionResult NotificationSubscriptionsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<NotificationSubscription>));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<NotificationSubscription>>(exampleJson)
                        : default(List<NotificationSubscription>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a notification subscription
        /// </summary>
        /// <param name="body">Parameters used to configure the subscription. It is possible to only receive cirtain types of notifications by adding filter values to the subscription.</param>
        /// <response code="201">Subscription created</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/notification-subscriptions")]
        [ValidateModelState]
        [SwaggerOperation("NotificationSubscriptionsPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(NotificationSubscription), description: "Subscription created")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult NotificationSubscriptionsPost([FromBody]NotificationSubscriptionNoID body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(NotificationSubscription));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NotificationSubscription>(exampleJson)
                        : default(NotificationSubscription);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Stop a notification subscription, using the subscription ID
        /// </summary>
        /// <param name="subscriptionID">The universal unique ID of the subscription to receive.</param>
        /// <response code="204">Subscription stopped</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/notification-subscriptions/{subscriptionID}")]
        [ValidateModelState]
        [SwaggerOperation("NotificationSubscriptionsSubscriptionIDDelete")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult NotificationSubscriptionsSubscriptionIDDelete([FromRoute][Required]Guid? subscriptionID)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Find notification subscription by subscription ID
        /// </summary>
        /// <param name="subscriptionID">The universal unique ID of the subscription to receive.</param>
        /// <response code="200">Subscription returned</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/notification-subscriptions/{subscriptionID}")]
        [ValidateModelState]
        [SwaggerOperation("NotificationSubscriptionsSubscriptionIDGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(NotificationSubscription), description: "Subscription returned")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult NotificationSubscriptionsSubscriptionIDGet([FromRoute][Required]Guid? subscriptionID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NotificationSubscription));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NotificationSubscription>(exampleJson)
                        : default(NotificationSubscription);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Alter a notification subscription
        /// </summary>
        /// <param name="body">Parameters used to configure the subscription</param>
        /// <param name="subscriptionID">The universal unique ID of the subscription to receive.</param>
        /// <response code="200">Subscription updated</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/notification-subscriptions/{subscriptionID}")]
        [ValidateModelState]
        [SwaggerOperation("NotificationSubscriptionsSubscriptionIDPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(NotificationSubscription), description: "Subscription updated")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult NotificationSubscriptionsSubscriptionIDPut([FromBody]NotificationSubscription body, [FromRoute][Required]Guid? subscriptionID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NotificationSubscription));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<NotificationSubscription>(exampleJson)
                        : default(NotificationSubscription);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
