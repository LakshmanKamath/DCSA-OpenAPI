/*
 * DCSA OpenAPI specification for Track & Trace
 *
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@dcsa.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NotificationsApiController : ControllerBase
    { 
        /// <summary>
        /// Find notifications.
        /// </summary>
        /// <remarks>Returns all notifications filtered by the parameters.</remarks>
        /// <param name="notificationType">The type of notification(s) to filter by. Default value is all notification types if no value(s) is selected. It is possible to select any combination of values by comma separating values</param>
        /// <param name="carrierBookingReference">A set of unique characters provided by carrier to identify a booking.</param>
        /// <param name="transportDocumentID">The Transport Document ID identifier is an identifier that links to a shipment, i.e. a Bill of Lading or a Sea Waybill. A bill of lading is the document of title to the goods issued to the customer which confirms the carrier&amp;apos;s receipt of the cargo from the customer, acknowledging goods being shipped and specifying the terms of delivery. The Sea Waybill is a simpler document, the main difference being that it is non-negotiable. </param>
        /// <param name="equipmentReference">The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.</param>
        /// <param name="scheduleID">ID uniquely identifying a schedule, to filter notifications by.</param>
        /// <param name="transportCallID">ID uniquely identifying a transport call, to filter notifications by.</param>
        /// <param name="limit">Maximum number of items to return.</param>
        /// <param name="cursor">A server generated value to specify a specific point in a collection result, used for pagination.</param>
        /// <response code="200">Successful operation</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/notifications")]
        [ValidateModelState]
        [SwaggerOperation("NotificationsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Notifications), description: "Successful operation")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult NotificationsGet([FromQuery]NotificationTypeList notificationType, [FromQuery]string carrierBookingReference, [FromQuery]Guid? transportDocumentID, [FromQuery]string equipmentReference, [FromQuery]Guid? scheduleID, [FromQuery]Guid? transportCallID, [FromQuery]int? limit, [FromQuery]string cursor)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Notifications));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "[ \"\", \"\" ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Notifications>(exampleJson)
                        : default(Notifications);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find notification by notificationID.
        /// </summary>
        /// <remarks>Returns notification with the specified notificationID.</remarks>
        /// <param name="notificationID">The ID of the notification to receive</param>
        /// <response code="200">Successful operation</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/notifications/{notificationID}")]
        [ValidateModelState]
        [SwaggerOperation("NotificationsNotificationIDGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Successful operation")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Unexpected error")]
        public virtual IActionResult NotificationsNotificationIDGet([FromRoute][Required]Guid? notificationID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(Error));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
                        : default(InlineResponse200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
