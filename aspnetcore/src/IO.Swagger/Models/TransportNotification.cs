/*
 * DCSA OpenAPI specification for Track & Trace
 *
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@dcsa.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The transport notification entity is a specialization of the notification entity to support specification of data that only applies to a transport notification.
    /// </summary>
    [DataContract]
    public partial class TransportNotification : BaseNotification, IEquatable<TransportNotification>
    { 
        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [DataMember(Name="notificationType")]
        public string NotificationType { get; set; }

        /// <summary>
        /// Gets or Sets EventClassifierCode
        /// </summary>
        [DataMember(Name="eventClassifierCode")]
        public EventClassifierCode EventClassifierCode { get; set; }

        /// <summary>
        /// Unique identifier for Event Type Code, for transport events this is either ARRI (Arrival) or DEPA (Departure).
        /// </summary>
        /// <value>Unique identifier for Event Type Code, for transport events this is either ARRI (Arrival) or DEPA (Departure).</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NotificationSubtypeEnum
        {
            /// <summary>
            /// Enum ARRIEnum for ARRI
            /// </summary>
            [EnumMember(Value = "ARRI")]
            ARRIEnum = 0,
            /// <summary>
            /// Enum DEPAEnum for DEPA
            /// </summary>
            [EnumMember(Value = "DEPA")]
            DEPAEnum = 1        }

        /// <summary>
        /// Unique identifier for Event Type Code, for transport events this is either ARRI (Arrival) or DEPA (Departure).
        /// </summary>
        /// <value>Unique identifier for Event Type Code, for transport events this is either ARRI (Arrival) or DEPA (Departure).</value>
        [DataMember(Name="notificationSubtype")]
        public NotificationSubtypeEnum? NotificationSubtype { get; set; }

        /// <summary>
        /// Gets or Sets DelayReasonCode
        /// </summary>
        [DataMember(Name="delayReasonCode")]
        public string DelayReasonCode { get; set; }

        /// <summary>
        /// Gets or Sets VesselScheduleChangeRemark
        /// </summary>
        [DataMember(Name="vesselScheduleChangeRemark")]
        public string VesselScheduleChangeRemark { get; set; }

        /// <summary>
        /// Gets or Sets TransportCallID
        /// </summary>
        [Required]
        [DataMember(Name="transportCallID")]
        public Guid? TransportCallID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransportNotification {\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  EventClassifierCode: ").Append(EventClassifierCode).Append("\n");
            sb.Append("  NotificationSubtype: ").Append(NotificationSubtype).Append("\n");
            sb.Append("  DelayReasonCode: ").Append(DelayReasonCode).Append("\n");
            sb.Append("  VesselScheduleChangeRemark: ").Append(VesselScheduleChangeRemark).Append("\n");
            sb.Append("  TransportCallID: ").Append(TransportCallID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TransportNotification)obj);
        }

        /// <summary>
        /// Returns true if TransportNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of TransportNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransportNotification other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NotificationType == other.NotificationType ||
                    NotificationType != null &&
                    NotificationType.Equals(other.NotificationType)
                ) && 
                (
                    EventClassifierCode == other.EventClassifierCode ||
                    EventClassifierCode != null &&
                    EventClassifierCode.Equals(other.EventClassifierCode)
                ) && 
                (
                    NotificationSubtype == other.NotificationSubtype ||
                    NotificationSubtype != null &&
                    NotificationSubtype.Equals(other.NotificationSubtype)
                ) && 
                (
                    DelayReasonCode == other.DelayReasonCode ||
                    DelayReasonCode != null &&
                    DelayReasonCode.Equals(other.DelayReasonCode)
                ) && 
                (
                    VesselScheduleChangeRemark == other.VesselScheduleChangeRemark ||
                    VesselScheduleChangeRemark != null &&
                    VesselScheduleChangeRemark.Equals(other.VesselScheduleChangeRemark)
                ) && 
                (
                    TransportCallID == other.TransportCallID ||
                    TransportCallID != null &&
                    TransportCallID.Equals(other.TransportCallID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NotificationType != null)
                    hashCode = hashCode * 59 + NotificationType.GetHashCode();
                    if (EventClassifierCode != null)
                    hashCode = hashCode * 59 + EventClassifierCode.GetHashCode();
                    if (NotificationSubtype != null)
                    hashCode = hashCode * 59 + NotificationSubtype.GetHashCode();
                    if (DelayReasonCode != null)
                    hashCode = hashCode * 59 + DelayReasonCode.GetHashCode();
                    if (VesselScheduleChangeRemark != null)
                    hashCode = hashCode * 59 + VesselScheduleChangeRemark.GetHashCode();
                    if (TransportCallID != null)
                    hashCode = hashCode * 59 + TransportCallID.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TransportNotification left, TransportNotification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TransportNotification left, TransportNotification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
