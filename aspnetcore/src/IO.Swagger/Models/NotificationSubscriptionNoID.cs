/*
 * DCSA OpenAPI specification for Track & Trace
 *
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@dcsa.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The object used by the POST notification-subscriptions endpoint
    /// </summary>
    [DataContract]
    public partial class NotificationSubscriptionNoID : IEquatable<NotificationSubscriptionNoID>
    { 
        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [DataMember(Name="notificationType")]
        public NotificationTypeList NotificationType { get; set; }

        /// <summary>
        /// Gets or Sets CarrierBookingReference
        /// </summary>
        [DataMember(Name="carrierBookingReference")]
        public string CarrierBookingReference { get; set; }

        /// <summary>
        /// Gets or Sets ShippingInstructionID
        /// </summary>
        [DataMember(Name="shippingInstructionID")]
        public Guid? ShippingInstructionID { get; set; }

        /// <summary>
        /// Gets or Sets TransportDocumentID
        /// </summary>
        [DataMember(Name="transportDocumentID")]
        public Guid? TransportDocumentID { get; set; }

        /// <summary>
        /// Gets or Sets TransportDocumentType
        /// </summary>
        [DataMember(Name="transportDocumentType")]
        public TransportDocumentType TransportDocumentType { get; set; }

        /// <summary>
        /// Gets or Sets EquipmentReference
        /// </summary>
        [DataMember(Name="equipmentReference")]
        public string EquipmentReference { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleID
        /// </summary>
        [DataMember(Name="scheduleID")]
        public Guid? ScheduleID { get; set; }

        /// <summary>
        /// Gets or Sets TransportCallID
        /// </summary>
        [DataMember(Name="transportCallID")]
        public Guid? TransportCallID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationSubscriptionNoID {\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  CarrierBookingReference: ").Append(CarrierBookingReference).Append("\n");
            sb.Append("  ShippingInstructionID: ").Append(ShippingInstructionID).Append("\n");
            sb.Append("  TransportDocumentID: ").Append(TransportDocumentID).Append("\n");
            sb.Append("  TransportDocumentType: ").Append(TransportDocumentType).Append("\n");
            sb.Append("  EquipmentReference: ").Append(EquipmentReference).Append("\n");
            sb.Append("  ScheduleID: ").Append(ScheduleID).Append("\n");
            sb.Append("  TransportCallID: ").Append(TransportCallID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NotificationSubscriptionNoID)obj);
        }

        /// <summary>
        /// Returns true if NotificationSubscriptionNoID instances are equal
        /// </summary>
        /// <param name="other">Instance of NotificationSubscriptionNoID to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationSubscriptionNoID other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NotificationType == other.NotificationType ||
                    NotificationType != null &&
                    NotificationType.Equals(other.NotificationType)
                ) && 
                (
                    CarrierBookingReference == other.CarrierBookingReference ||
                    CarrierBookingReference != null &&
                    CarrierBookingReference.Equals(other.CarrierBookingReference)
                ) && 
                (
                    ShippingInstructionID == other.ShippingInstructionID ||
                    ShippingInstructionID != null &&
                    ShippingInstructionID.Equals(other.ShippingInstructionID)
                ) && 
                (
                    TransportDocumentID == other.TransportDocumentID ||
                    TransportDocumentID != null &&
                    TransportDocumentID.Equals(other.TransportDocumentID)
                ) && 
                (
                    TransportDocumentType == other.TransportDocumentType ||
                    TransportDocumentType != null &&
                    TransportDocumentType.Equals(other.TransportDocumentType)
                ) && 
                (
                    EquipmentReference == other.EquipmentReference ||
                    EquipmentReference != null &&
                    EquipmentReference.Equals(other.EquipmentReference)
                ) && 
                (
                    ScheduleID == other.ScheduleID ||
                    ScheduleID != null &&
                    ScheduleID.Equals(other.ScheduleID)
                ) && 
                (
                    TransportCallID == other.TransportCallID ||
                    TransportCallID != null &&
                    TransportCallID.Equals(other.TransportCallID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NotificationType != null)
                    hashCode = hashCode * 59 + NotificationType.GetHashCode();
                    if (CarrierBookingReference != null)
                    hashCode = hashCode * 59 + CarrierBookingReference.GetHashCode();
                    if (ShippingInstructionID != null)
                    hashCode = hashCode * 59 + ShippingInstructionID.GetHashCode();
                    if (TransportDocumentID != null)
                    hashCode = hashCode * 59 + TransportDocumentID.GetHashCode();
                    if (TransportDocumentType != null)
                    hashCode = hashCode * 59 + TransportDocumentType.GetHashCode();
                    if (EquipmentReference != null)
                    hashCode = hashCode * 59 + EquipmentReference.GetHashCode();
                    if (ScheduleID != null)
                    hashCode = hashCode * 59 + ScheduleID.GetHashCode();
                    if (TransportCallID != null)
                    hashCode = hashCode * 59 + TransportCallID.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NotificationSubscriptionNoID left, NotificationSubscriptionNoID right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NotificationSubscriptionNoID left, NotificationSubscriptionNoID right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
