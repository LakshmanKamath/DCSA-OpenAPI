/*
 * DCSA OpenAPI specification for Track & Trace
 *
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@dcsa.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The Notification entity is described as a generalization of all the specific notification categories. A notification always takes place in relation to a shipment and can additionally be linked to a transport or an equipment
    /// </summary>
    [DataContract]
    public partial class BaseNotification : IEquatable<BaseNotification>
    { 
        /// <summary>
        /// Gets or Sets NotificationID
        /// </summary>
        [Required]
        [DataMember(Name="notificationID")]
        public Guid? NotificationID { get; set; }

        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [Required]
        [DataMember(Name="notificationType")]
        public NotificationType NotificationType { get; set; }

        /// <summary>
        /// Gets or Sets NotificationDateTime
        /// </summary>
        [Required]
        [DataMember(Name="notificationDateTime")]
        public string NotificationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets NotificationSubtype
        /// </summary>
        [DataMember(Name="notificationSubtype")]
        public string NotificationSubtype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseNotification {\n");
            sb.Append("  NotificationID: ").Append(NotificationID).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  NotificationDateTime: ").Append(NotificationDateTime).Append("\n");
            sb.Append("  NotificationSubtype: ").Append(NotificationSubtype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BaseNotification)obj);
        }

        /// <summary>
        /// Returns true if BaseNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of BaseNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseNotification other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NotificationID == other.NotificationID ||
                    NotificationID != null &&
                    NotificationID.Equals(other.NotificationID)
                ) && 
                (
                    NotificationType == other.NotificationType ||
                    NotificationType != null &&
                    NotificationType.Equals(other.NotificationType)
                ) && 
                (
                    NotificationDateTime == other.NotificationDateTime ||
                    NotificationDateTime != null &&
                    NotificationDateTime.Equals(other.NotificationDateTime)
                ) && 
                (
                    NotificationSubtype == other.NotificationSubtype ||
                    NotificationSubtype != null &&
                    NotificationSubtype.Equals(other.NotificationSubtype)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NotificationID != null)
                    hashCode = hashCode * 59 + NotificationID.GetHashCode();
                    if (NotificationType != null)
                    hashCode = hashCode * 59 + NotificationType.GetHashCode();
                    if (NotificationDateTime != null)
                    hashCode = hashCode * 59 + NotificationDateTime.GetHashCode();
                    if (NotificationSubtype != null)
                    hashCode = hashCode * 59 + NotificationSubtype.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BaseNotification left, BaseNotification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BaseNotification left, BaseNotification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
