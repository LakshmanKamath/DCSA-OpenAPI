/*
 * DCSA OpenAPI specification for Track & Trace
 *
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@dcsa.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Error : IEquatable<Error>
    { 
        /// <summary>
        /// The HTTP request method type
        /// </summary>
        /// <value>The HTTP request method type</value>
        [Required]
        [DataMember(Name="httpMethod")]
        public string HttpMethod { get; set; }

        /// <summary>
        /// The request URI.
        /// </summary>
        /// <value>The request URI.</value>
        [Required]
        [DataMember(Name="requestUri")]
        public string RequestUri { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [Required]
        [DataMember(Name="errors")]
        public Errors Errors { get; set; }

        /// <summary>
        /// The HTTP status code
        /// </summary>
        /// <value>The HTTP status code</value>
        [Required]
        [DataMember(Name="statusCode")]
        public int? StatusCode { get; set; }

        /// <summary>
        /// The textual representation of the response status.
        /// </summary>
        /// <value>The textual representation of the response status.</value>
        [Required]
        [DataMember(Name="statusCodeText")]
        public string StatusCodeText { get; set; }

        /// <summary>
        /// The date and time (in ISO 8601 format) the error occured.
        /// </summary>
        /// <value>The date and time (in ISO 8601 format) the error occured.</value>
        [Required]
        [DataMember(Name="errorDateTime")]
        public string ErrorDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  HttpMethod: ").Append(HttpMethod).Append("\n");
            sb.Append("  RequestUri: ").Append(RequestUri).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  StatusCodeText: ").Append(StatusCodeText).Append("\n");
            sb.Append("  ErrorDateTime: ").Append(ErrorDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Error)obj);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="other">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HttpMethod == other.HttpMethod ||
                    HttpMethod != null &&
                    HttpMethod.Equals(other.HttpMethod)
                ) && 
                (
                    RequestUri == other.RequestUri ||
                    RequestUri != null &&
                    RequestUri.Equals(other.RequestUri)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    Errors.Equals(other.Errors)
                ) && 
                (
                    StatusCode == other.StatusCode ||
                    StatusCode != null &&
                    StatusCode.Equals(other.StatusCode)
                ) && 
                (
                    StatusCodeText == other.StatusCodeText ||
                    StatusCodeText != null &&
                    StatusCodeText.Equals(other.StatusCodeText)
                ) && 
                (
                    ErrorDateTime == other.ErrorDateTime ||
                    ErrorDateTime != null &&
                    ErrorDateTime.Equals(other.ErrorDateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HttpMethod != null)
                    hashCode = hashCode * 59 + HttpMethod.GetHashCode();
                    if (RequestUri != null)
                    hashCode = hashCode * 59 + RequestUri.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                    if (StatusCodeText != null)
                    hashCode = hashCode * 59 + StatusCodeText.GetHashCode();
                    if (ErrorDateTime != null)
                    hashCode = hashCode * 59 + ErrorDateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Error left, Error right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Error left, Error right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
