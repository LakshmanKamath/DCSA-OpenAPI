/*
 * DCSA OpenAPI specification for Track & Trace
 *
 * API specification issued by DCSA.org
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@dcsa.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// The shipment notification entity is a specialization of the notification entity to support specification of data that only applies to a shipment notification.
    /// </summary>
    [DataContract]
    public partial class ShipmentNotification : BaseNotification, IEquatable<ShipmentNotification>
    { 
        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [DataMember(Name="notificationType")]
        public string NotificationType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentID
        /// </summary>
        [DataMember(Name="documentID")]
        public string DocumentID { get; set; }

        /// <summary>
        /// Gets or Sets ShipmentInformationType
        /// </summary>
        [DataMember(Name="shipmentInformationType")]
        public ShipmentInformationType ShipmentInformationType { get; set; }

        /// <summary>
        /// Gets or Sets NotificationSubtype
        /// </summary>
        [DataMember(Name="notificationSubtype")]
        public DocumentStatus NotificationSubtype { get; set; }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason")]
        public string Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShipmentNotification {\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  DocumentID: ").Append(DocumentID).Append("\n");
            sb.Append("  ShipmentInformationType: ").Append(ShipmentInformationType).Append("\n");
            sb.Append("  NotificationSubtype: ").Append(NotificationSubtype).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ShipmentNotification)obj);
        }

        /// <summary>
        /// Returns true if ShipmentNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of ShipmentNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipmentNotification other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NotificationType == other.NotificationType ||
                    NotificationType != null &&
                    NotificationType.Equals(other.NotificationType)
                ) && 
                (
                    DocumentID == other.DocumentID ||
                    DocumentID != null &&
                    DocumentID.Equals(other.DocumentID)
                ) && 
                (
                    ShipmentInformationType == other.ShipmentInformationType ||
                    ShipmentInformationType != null &&
                    ShipmentInformationType.Equals(other.ShipmentInformationType)
                ) && 
                (
                    NotificationSubtype == other.NotificationSubtype ||
                    NotificationSubtype != null &&
                    NotificationSubtype.Equals(other.NotificationSubtype)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NotificationType != null)
                    hashCode = hashCode * 59 + NotificationType.GetHashCode();
                    if (DocumentID != null)
                    hashCode = hashCode * 59 + DocumentID.GetHashCode();
                    if (ShipmentInformationType != null)
                    hashCode = hashCode * 59 + ShipmentInformationType.GetHashCode();
                    if (NotificationSubtype != null)
                    hashCode = hashCode * 59 + NotificationSubtype.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ShipmentNotification left, ShipmentNotification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ShipmentNotification left, ShipmentNotification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
